const nodemailer = require("nodemailer");
const hbs = require("nodemailer-express-handlebars");
const path = require("path");
require("dotenv").config();
const sendMail = data => new Promise((resolve, reject) => {
  const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD
    }
  });
  transporter.use("compile", hbs({
    viewEngine: {
      extName: ".html",
      partialsDir: path.resolve("./src/templates/email"),
      defaultLayout: false
    },
    viewPath: path.resolve("./src/templates/email"),
    extName: ".html"
  }));
  const mailOptions = {
    from: `"Tickitz Movie" <exampleemail581@gmail.com>`,
    to: data.to,
    subject: data.subject,
    template: data.template,
    context: data.data
  };

  // if (data.attachment) {
  //   if (data.attachment.length > 0) {
  //     mailOptions.attachment = data.attachment;
  //   }
  // }

  transporter.sendMail(mailOptions, (err, info) => {
    if (err) {
      reject(err);
    } else {
      resolve(info.response);
    }
  });
});
module.exports = sendMail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJub2RlbWFpbGVyIiwicmVxdWlyZSIsImhicyIsInBhdGgiLCJjb25maWciLCJzZW5kTWFpbCIsImRhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRyYW5zcG9ydGVyIiwiY3JlYXRlVHJhbnNwb3J0IiwiaG9zdCIsInBvcnQiLCJzZWN1cmUiLCJhdXRoIiwidXNlciIsInByb2Nlc3MiLCJlbnYiLCJFTUFJTF9VU0VSIiwicGFzcyIsIkVNQUlMX1BBU1NXT1JEIiwidXNlIiwidmlld0VuZ2luZSIsImV4dE5hbWUiLCJwYXJ0aWFsc0RpciIsImRlZmF1bHRMYXlvdXQiLCJ2aWV3UGF0aCIsIm1haWxPcHRpb25zIiwiZnJvbSIsInRvIiwic3ViamVjdCIsInRlbXBsYXRlIiwiY29udGV4dCIsImVyciIsImluZm8iLCJyZXNwb25zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVyL21haWwvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm9kZW1haWxlciA9IHJlcXVpcmUoXCJub2RlbWFpbGVyXCIpO1xyXG5jb25zdCBoYnMgPSByZXF1aXJlKFwibm9kZW1haWxlci1leHByZXNzLWhhbmRsZWJhcnNcIik7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxucmVxdWlyZShcImRvdGVudlwiKS5jb25maWcoKTtcclxuXHJcbmNvbnN0IHNlbmRNYWlsID0gKGRhdGEpID0+XHJcbiAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgY29uc3QgdHJhbnNwb3J0ZXIgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XHJcbiAgICAgIGhvc3Q6IFwic210cC5nbWFpbC5jb21cIixcclxuICAgICAgcG9ydDogNTg3LFxyXG4gICAgICBzZWN1cmU6IGZhbHNlLFxyXG4gICAgICBhdXRoOiB7XHJcbiAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuRU1BSUxfVVNFUixcclxuICAgICAgICBwYXNzOiBwcm9jZXNzLmVudi5FTUFJTF9QQVNTV09SRCxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRyYW5zcG9ydGVyLnVzZShcclxuICAgICAgXCJjb21waWxlXCIsXHJcbiAgICAgIGhicyh7XHJcbiAgICAgICAgdmlld0VuZ2luZToge1xyXG4gICAgICAgICAgZXh0TmFtZTogXCIuaHRtbFwiLFxyXG4gICAgICAgICAgcGFydGlhbHNEaXI6IHBhdGgucmVzb2x2ZShcIi4vc3JjL3RlbXBsYXRlcy9lbWFpbFwiKSxcclxuICAgICAgICAgIGRlZmF1bHRMYXlvdXQ6IGZhbHNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlld1BhdGg6IHBhdGgucmVzb2x2ZShcIi4vc3JjL3RlbXBsYXRlcy9lbWFpbFwiKSxcclxuICAgICAgICBleHROYW1lOiBcIi5odG1sXCIsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG1haWxPcHRpb25zID0ge1xyXG4gICAgICBmcm9tOiBgXCJUaWNraXR6IE1vdmllXCIgPGV4YW1wbGVlbWFpbDU4MUBnbWFpbC5jb20+YCxcclxuICAgICAgdG86IGRhdGEudG8sXHJcbiAgICAgIHN1YmplY3Q6IGRhdGEuc3ViamVjdCxcclxuICAgICAgdGVtcGxhdGU6IGRhdGEudGVtcGxhdGUsXHJcbiAgICAgIGNvbnRleHQ6IGRhdGEuZGF0YSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gaWYgKGRhdGEuYXR0YWNobWVudCkge1xyXG4gICAgLy8gICBpZiAoZGF0YS5hdHRhY2htZW50Lmxlbmd0aCA+IDApIHtcclxuICAgIC8vICAgICBtYWlsT3B0aW9ucy5hdHRhY2htZW50ID0gZGF0YS5hdHRhY2htZW50O1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgdHJhbnNwb3J0ZXIuc2VuZE1haWwobWFpbE9wdGlvbnMsIChlcnIsIGluZm8pID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUoaW5mby5yZXNwb25zZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBzZW5kTWFpbDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDeEMsTUFBTUMsR0FBRyxHQUFHRCxPQUFPLENBQUMsK0JBQStCLENBQUM7QUFDcEQsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzVCQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUNHLE1BQU0sRUFBRTtBQUUxQixNQUFNQyxRQUFRLEdBQUlDLElBQUksSUFDcEIsSUFBSUMsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0VBQy9CLE1BQU1DLFdBQVcsR0FBR1YsVUFBVSxDQUFDVyxlQUFlLENBQUM7SUFDN0NDLElBQUksRUFBRSxnQkFBZ0I7SUFDdEJDLElBQUksRUFBRSxHQUFHO0lBQ1RDLE1BQU0sRUFBRSxLQUFLO0lBQ2JDLElBQUksRUFBRTtNQUNKQyxJQUFJLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxVQUFVO01BQzVCQyxJQUFJLEVBQUVILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRztJQUNwQjtFQUNGLENBQUMsQ0FBQztFQUVGWCxXQUFXLENBQUNZLEdBQUcsQ0FDYixTQUFTLEVBQ1RwQixHQUFHLENBQUM7SUFDRnFCLFVBQVUsRUFBRTtNQUNWQyxPQUFPLEVBQUUsT0FBTztNQUNoQkMsV0FBVyxFQUFFdEIsSUFBSSxDQUFDSyxPQUFPLENBQUMsdUJBQXVCLENBQUM7TUFDbERrQixhQUFhLEVBQUU7SUFDakIsQ0FBQztJQUNEQyxRQUFRLEVBQUV4QixJQUFJLENBQUNLLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztJQUMvQ2dCLE9BQU8sRUFBRTtFQUNYLENBQUMsQ0FBQyxDQUNIO0VBRUQsTUFBTUksV0FBVyxHQUFHO0lBQ2xCQyxJQUFJLEVBQUcsNkNBQTRDO0lBQ25EQyxFQUFFLEVBQUV4QixJQUFJLENBQUN3QixFQUFFO0lBQ1hDLE9BQU8sRUFBRXpCLElBQUksQ0FBQ3lCLE9BQU87SUFDckJDLFFBQVEsRUFBRTFCLElBQUksQ0FBQzBCLFFBQVE7SUFDdkJDLE9BQU8sRUFBRTNCLElBQUksQ0FBQ0E7RUFDaEIsQ0FBQzs7RUFFRDtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBSSxXQUFXLENBQUNMLFFBQVEsQ0FBQ3VCLFdBQVcsRUFBRSxDQUFDTSxHQUFHLEVBQUVDLElBQUksS0FBSztJQUMvQyxJQUFJRCxHQUFHLEVBQUU7TUFDUHpCLE1BQU0sQ0FBQ3lCLEdBQUcsQ0FBQztJQUNiLENBQUMsTUFBTTtNQUNMMUIsT0FBTyxDQUFDMkIsSUFBSSxDQUFDQyxRQUFRLENBQUM7SUFDeEI7RUFDRixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFSkMsTUFBTSxDQUFDQyxPQUFPLEdBQUdqQyxRQUFRIn0=