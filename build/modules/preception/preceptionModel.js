const connection = require("../../config/mysql");
module.exports = {
  getAllPreception: (limit, offset, search, sort) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM data_preception WHERE id_pasien LIKE '%${search}%' ORDER BY ${sort} LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountPreception: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM data_preception WHERE nama_pasien LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  postPreception: data => new Promise((resolve, reject) => {
    const query = connection.query("INSERT INTO data_preception SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
    // eslint-disable-next-line no-console
    console.log(query.sql);
  }),
  getExportPdfByIdRekammedis: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM data_preception WHERE id = ?", id, (error, results) => {
      if (!error) {
        resolve(results);
      } else {
        reject(new Error(`Message : ${error.message}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxQcmVjZXB0aW9uIiwibGltaXQiLCJvZmZzZXQiLCJzZWFyY2giLCJzb3J0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJxdWVyeSIsImVyciIsInJlc3VsdCIsIkVycm9yIiwic3FsTWVzc2FnZSIsImdldENvdW50UHJlY2VwdGlvbiIsInRvdGFsIiwicG9zdFByZWNlcHRpb24iLCJkYXRhIiwiZXJyb3IiLCJuZXdSZXN1bHQiLCJpZCIsImluc2VydElkIiwiY29uc29sZSIsImxvZyIsInNxbCIsImdldEV4cG9ydFBkZkJ5SWRSZWthbW1lZGlzIiwicmVzdWx0cyIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlcy9wcmVjZXB0aW9uL3ByZWNlcHRpb25Nb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25uZWN0aW9uID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZy9teXNxbFwiKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGdldEFsbFByZWNlcHRpb246IChsaW1pdCwgb2Zmc2V0LCBzZWFyY2gsIHNvcnQpID0+XHJcbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXHJcbiAgICAgICAgYFNFTEVDVCAqIEZST00gZGF0YV9wcmVjZXB0aW9uIFdIRVJFIGlkX3Bhc2llbiBMSUtFICclJHtzZWFyY2h9JScgT1JERVIgQlkgJHtzb3J0fSBMSU1JVCA/IE9GRlNFVCA/YCxcclxuICAgICAgICBbbGltaXQsIG9mZnNldF0sXHJcbiAgICAgICAgKGVyciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICBpZiAoIWVycikge1xyXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vyci5zcWxNZXNzYWdlfWApKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9KSxcclxuXHJcbiAgICBnZXRDb3VudFByZWNlcHRpb246IChzZWFyY2gpID0+XHJcbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXHJcbiAgICAgICAgYFNFTEVDVCBDT1VOVCgqKSBBUyB0b3RhbCBGUk9NIGRhdGFfcHJlY2VwdGlvbiBXSEVSRSBuYW1hX3Bhc2llbiBMSUtFICclJHtzZWFyY2h9JSdgLFxyXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRbMF0udG90YWwpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnIuc3FsTWVzc2FnZX1gKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSksXHJcblxyXG4gICAgcG9zdFByZWNlcHRpb246IChkYXRhKSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCBxdWVyeSA9IGNvbm5lY3Rpb24ucXVlcnkoXHJcbiAgICAgICAgXCJJTlNFUlQgSU5UTyBkYXRhX3ByZWNlcHRpb24gU0VUID9cIixcclxuICAgICAgICBkYXRhLFxyXG4gICAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICBpZiAoIWVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcclxuICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydElkLFxyXG4gICAgICAgICAgICAgIC4uLmRhdGEsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlc29sdmUobmV3UmVzdWx0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgICBjb25zb2xlLmxvZyhxdWVyeS5zcWwpO1xyXG4gICAgfSksXHJcblxyXG4gICAgZ2V0RXhwb3J0UGRmQnlJZFJla2FtbWVkaXM6IChpZCkgPT5cclxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29ubmVjdGlvbi5xdWVyeShcclxuICAgICAgICBcIlNFTEVDVCAqIEZST00gZGF0YV9wcmVjZXB0aW9uIFdIRVJFIGlkID0gP1wiLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIChlcnJvciwgcmVzdWx0cykgPT4ge1xyXG4gICAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgTWVzc2FnZSA6ICR7ZXJyb3IubWVzc2FnZX1gKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSksXHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFFaERDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLGdCQUFnQixFQUFFLENBQUNDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLElBQUksS0FDNUMsSUFBSUMsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQy9CWCxVQUFVLENBQUNZLEtBQUssQ0FDYix3REFBdURMLE1BQU8sZUFBY0MsSUFBSyxtQkFBa0IsRUFDcEcsQ0FBQ0gsS0FBSyxFQUFFQyxNQUFNLENBQUMsRUFDZixDQUFDTyxHQUFHLEVBQUVDLE1BQU0sS0FBSztNQUNmLElBQUksQ0FBQ0QsR0FBRyxFQUFFO1FBQ1JILE9BQU8sQ0FBQ0ksTUFBTSxDQUFDO01BQ2pCLENBQUMsTUFBTTtRQUNMSCxNQUFNLENBQUMsSUFBSUksS0FBSyxDQUFFLFNBQVFGLEdBQUcsQ0FBQ0csVUFBVyxFQUFDLENBQUMsQ0FBQztNQUM5QztJQUNGLENBQUMsQ0FDRjtFQUNILENBQUMsQ0FBQztFQUVGQyxrQkFBa0IsRUFBR1YsTUFBTSxJQUMzQixJQUFJRSxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7SUFDL0JYLFVBQVUsQ0FBQ1ksS0FBSyxDQUNiLDBFQUF5RUwsTUFBTyxJQUFHLEVBQ3BGLENBQUNNLEdBQUcsRUFBRUMsTUFBTSxLQUFLO01BQ2YsSUFBSSxDQUFDRCxHQUFHLEVBQUU7UUFDUkgsT0FBTyxDQUFDSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUNJLEtBQUssQ0FBQztNQUMxQixDQUFDLE1BQU07UUFDTFAsTUFBTSxDQUFDLElBQUlJLEtBQUssQ0FBRSxTQUFRRixHQUFHLENBQUNHLFVBQVcsRUFBQyxDQUFDLENBQUM7TUFDOUM7SUFDRixDQUFDLENBQ0Y7RUFDSCxDQUFDLENBQUM7RUFFRkcsY0FBYyxFQUFHQyxJQUFJLElBQ3JCLElBQUlYLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztJQUMvQixNQUFNQyxLQUFLLEdBQUdaLFVBQVUsQ0FBQ1ksS0FBSyxDQUM1QixtQ0FBbUMsRUFDbkNRLElBQUksRUFDSixDQUFDQyxLQUFLLEVBQUVQLE1BQU0sS0FBSztNQUNqQixJQUFJLENBQUNPLEtBQUssRUFBRTtRQUNWLE1BQU1DLFNBQVMsR0FBRztVQUNoQkMsRUFBRSxFQUFFVCxNQUFNLENBQUNVLFFBQVE7VUFDbkIsR0FBR0o7UUFDTCxDQUFDO1FBQ0RWLE9BQU8sQ0FBQ1ksU0FBUyxDQUFDO01BQ3BCLENBQUMsTUFBTTtRQUNMWCxNQUFNLENBQUMsSUFBSUksS0FBSyxDQUFFLFNBQVFNLEtBQUssQ0FBQ0wsVUFBVyxFQUFDLENBQUMsQ0FBQztNQUNoRDtJQUNGLENBQUMsQ0FDRjtJQUNEO0lBQ0FTLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDZCxLQUFLLENBQUNlLEdBQUcsQ0FBQztFQUN4QixDQUFDLENBQUM7RUFFRkMsMEJBQTBCLEVBQUdMLEVBQUUsSUFDL0IsSUFBSWQsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO0lBQy9CWCxVQUFVLENBQUNZLEtBQUssQ0FDZCw0Q0FBNEMsRUFDNUNXLEVBQUUsRUFDRixDQUFDRixLQUFLLEVBQUVRLE9BQU8sS0FBSztNQUNsQixJQUFJLENBQUNSLEtBQUssRUFBRTtRQUNWWCxPQUFPLENBQUNtQixPQUFPLENBQUM7TUFDbEIsQ0FBQyxNQUFNO1FBQ0xsQixNQUFNLENBQUMsSUFBSUksS0FBSyxDQUFFLGFBQVlNLEtBQUssQ0FBQ1MsT0FBUSxFQUFDLENBQUMsQ0FBQztNQUNqRDtJQUNGLENBQUMsQ0FDRjtFQUNILENBQUM7QUFDTCxDQUFDIn0=