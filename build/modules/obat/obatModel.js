const connection = require("../../config/mysql");
module.exports = {
  getAllObat: (limit, offset, search, sort) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM data_obat WHERE nama_obat LIKE '%${search}%' ORDER BY ${sort} LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getObatbyid: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM data_obat WHERE id = ?", id, (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountObat: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM data_obat WHERE nama_obat LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  postObat: data => new Promise((resolve, reject) => {
    const query = connection.query("INSERT INTO data_obat SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
    // eslint-disable-next-line no-console
    console.log(query.sql);
  }),
  updateObat: (data, id) => new Promise((resolve, reject) => {
    connection.query("UPDATE data_obat SET ? WHERE id = ?", [data, id], error => {
      if (!error) {
        const newResult = {
          id,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxPYmF0IiwibGltaXQiLCJvZmZzZXQiLCJzZWFyY2giLCJzb3J0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJxdWVyeSIsImVyciIsInJlc3VsdCIsIkVycm9yIiwic3FsTWVzc2FnZSIsImdldE9iYXRieWlkIiwiaWQiLCJnZXRDb3VudE9iYXQiLCJ0b3RhbCIsInBvc3RPYmF0IiwiZGF0YSIsImVycm9yIiwibmV3UmVzdWx0IiwiaW5zZXJ0SWQiLCJjb25zb2xlIiwibG9nIiwic3FsIiwidXBkYXRlT2JhdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL29iYXQvb2JhdE1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbm5lY3Rpb24gPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnL215c3FsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0QWxsT2JhdDogKGxpbWl0LCBvZmZzZXQsIHNlYXJjaCwgc29ydCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBgU0VMRUNUICogRlJPTSBkYXRhX29iYXQgV0hFUkUgbmFtYV9vYmF0IExJS0UgJyUke3NlYXJjaH0lJyBPUkRFUiBCWSAke3NvcnR9IExJTUlUID8gT0ZGU0VUID9gLFxuICAgICAgICBbbGltaXQsIG9mZnNldF0sXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcblxuICAgIGdldE9iYXRieWlkOiAoaWQpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcbiAgICAgICAgXCJTRUxFQ1QgKiBGUk9NIGRhdGFfb2JhdCBXSEVSRSBpZCA9ID9cIixcbiAgICAgICAgaWQsXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcblxuICAgIGdldENvdW50T2JhdDogKHNlYXJjaCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBgU0VMRUNUIENPVU5UKCopIEFTIHRvdGFsIEZST00gZGF0YV9vYmF0IFdIRVJFIG5hbWFfb2JhdCBMSUtFICclJHtzZWFyY2h9JSdgLFxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRbMF0udG90YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vyci5zcWxNZXNzYWdlfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksXG5cbiAgICBwb3N0T2JhdDogKGRhdGEpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBcIklOU0VSVCBJTlRPIGRhdGFfb2JhdCBTRVQgP1wiLFxuICAgICAgICBkYXRhLFxuICAgICAgICAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRJZCxcbiAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUubG9nKHF1ZXJ5LnNxbCk7XG4gICAgfSksXG5cbiAgICB1cGRhdGVPYmF0OiAoZGF0YSwgaWQpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcbiAgICAgICAgXCJVUERBVEUgZGF0YV9vYmF0IFNFVCA/IFdIRVJFIGlkID0gP1wiLFxuICAgICAgICBbZGF0YSwgaWRdLFxuICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdSZXN1bHQgPSB7XG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc29sdmUobmV3UmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnJvci5zcWxNZXNzYWdlfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksXG59O1xuIl0sIm1hcHBp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