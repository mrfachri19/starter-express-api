/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */
const obatModel = require("./obatModel");
const helperWrapper = require("../../helper/wrapper");
module.exports = {
  getAllObat: async (req, res) => {
    try {
      let {
        page,
        limit,
        search,
        sort
      } = req.query;
      page = Number(page) || 1;
      limit = Number(limit) || 10;
      search = search || "";
      sort = sort || "nama_obat ASC";
      let offset = page * limit - limit;
      const totalData = await obatModel.getCountObat(search);
      const totalPage = Math.ceil(totalData / limit);
      if (totalPage < page) {
        offset = 0;
        page = 1;
      }
      const pageInfo = {
        page,
        totalPage,
        limit,
        totalData
      };
      const result = await obatModel.getAllObat(limit, offset, search, sort);
      if (result.length < 1) {
        return helperWrapper.response(res, 200, `Data not found !`, []);
      }
      return helperWrapper.response(res, 200, "Success get data", result, pageInfo);
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad request (${error.message})`, null);
    }
  },
  postObat: async (req, res) => {
    try {
      const {
        nama_obat,
        stok,
        category
      } = req.body;
      const setData = {
        nama_obat,
        stok,
        category
      };
      const result = await obatModel.postObat(setData);
      return helperWrapper.response(res, 200, "Succes create data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  },
  updateObat: async (req, res) => {
    try {
      const {
        id
      } = req.params;
      const checkId = await obatModel.getObatbyid(id);
      if (checkId.length < 1) {
        return helperWrapper.response(res, 404, `data by id ${id} not found !`, null);
      }
      const {
        nama_obat,
        stok,
        category
      } = req.body;
      const setData = {
        nama_obat,
        stok,
        category
      };
      // untuk mengupdate salah satu field saja
      Object.keys(setData).forEach(data => {
        if (!setData[data]) {
          delete setData[data];
        }
      });
      const result = await obatModel.updateObat(setData, id);
      return helperWrapper.response(res, 200, "succes update data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvYmF0TW9kZWwiLCJyZXF1aXJlIiwiaGVscGVyV3JhcHBlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxPYmF0IiwicmVxIiwicmVzIiwicGFnZSIsImxpbWl0Iiwic2VhcmNoIiwic29ydCIsInF1ZXJ5IiwiTnVtYmVyIiwib2Zmc2V0IiwidG90YWxEYXRhIiwiZ2V0Q291bnRPYmF0IiwidG90YWxQYWdlIiwiTWF0aCIsImNlaWwiLCJwYWdlSW5mbyIsInJlc3VsdCIsImxlbmd0aCIsInJlc3BvbnNlIiwiZXJyb3IiLCJtZXNzYWdlIiwicG9zdE9iYXQiLCJuYW1hX29iYXQiLCJzdG9rIiwiY2F0ZWdvcnkiLCJib2R5Iiwic2V0RGF0YSIsInVwZGF0ZU9iYXQiLCJpZCIsInBhcmFtcyIsImNoZWNrSWQiLCJnZXRPYmF0YnlpZCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZGF0YSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL29iYXQvb2JhdENvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuY29uc3Qgb2JhdE1vZGVsID0gcmVxdWlyZShcIi4vb2JhdE1vZGVsXCIpO1xuY29uc3QgaGVscGVyV3JhcHBlciA9IHJlcXVpcmUoXCIuLi8uLi9oZWxwZXIvd3JhcHBlclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEFsbE9iYXQ6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgeyBwYWdlLCBsaW1pdCwgc2VhcmNoLCBzb3J0IH0gPSByZXEucXVlcnk7XG4gICAgICBwYWdlID0gTnVtYmVyKHBhZ2UpIHx8IDE7XG4gICAgICBsaW1pdCA9IE51bWJlcihsaW1pdCkgfHwgMTA7XG4gICAgICBzZWFyY2ggPSBzZWFyY2ggfHwgXCJcIjtcbiAgICAgIHNvcnQgPSBzb3J0IHx8IFwibmFtYV9vYmF0IEFTQ1wiO1xuXG4gICAgICBsZXQgb2Zmc2V0ID0gcGFnZSAqIGxpbWl0IC0gbGltaXQ7XG4gICAgICBjb25zdCB0b3RhbERhdGEgPSBhd2FpdCBvYmF0TW9kZWwuZ2V0Q291bnRPYmF0KHNlYXJjaCk7XG4gICAgICBjb25zdCB0b3RhbFBhZ2UgPSBNYXRoLmNlaWwodG90YWxEYXRhIC8gbGltaXQpO1xuXG4gICAgICBpZiAodG90YWxQYWdlIDwgcGFnZSkge1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICBwYWdlID0gMTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFnZUluZm8gPSB7XG4gICAgICAgIHBhZ2UsXG4gICAgICAgIHRvdGFsUGFnZSxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIHRvdGFsRGF0YSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG9iYXRNb2RlbC5nZXRBbGxPYmF0KGxpbWl0LCBvZmZzZXQsIHNlYXJjaCwgc29ydCk7XG5cbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShyZXMsIDIwMCwgYERhdGEgbm90IGZvdW5kICFgLCBbXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDIwMCxcbiAgICAgICAgXCJTdWNjZXNzIGdldCBkYXRhXCIsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgcGFnZUluZm9cbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDQwMCxcbiAgICAgICAgYEJhZCByZXF1ZXN0ICgke2Vycm9yLm1lc3NhZ2V9KWAsXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIHBvc3RPYmF0OiBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBuYW1hX29iYXQsIHN0b2ssIGNhdGVnb3J5IH0gPSByZXEuYm9keTtcbiAgICAgIGNvbnN0IHNldERhdGEgPSB7XG4gICAgICAgIG5hbWFfb2JhdCxcbiAgICAgICAgc3RvayxcbiAgICAgICAgY2F0ZWdvcnksXG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb2JhdE1vZGVsLnBvc3RPYmF0KHNldERhdGEpO1xuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCAyMDAsIFwiU3VjY2VzIGNyZWF0ZSBkYXRhXCIsIHJlc3VsdCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDQwMCxcbiAgICAgICAgYGJhZCByZXF1ZXN0ICgke2Vycm9yLm1lc3NhZ2V9KWAsXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZU9iYXQ6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgICAgY29uc3QgY2hlY2tJZCA9IGF3YWl0IG9iYXRNb2RlbC5nZXRPYmF0YnlpZChpZCk7XG4gICAgICBpZiAoY2hlY2tJZC5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICAgIHJlcyxcbiAgICAgICAgICA0MDQsXG4gICAgICAgICAgYGRhdGEgYnkgaWQgJHtpZH0gbm90IGZvdW5kICFgLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgbmFtYV9vYmF0LCBzdG9rLCBjYXRlZ29yeSB9ID0gcmVxLmJvZHk7XG4gICAgICBjb25zdCBzZXREYXRhID0ge1xuICAgICAgICBuYW1hX29iYXQsXG4gICAgICAgIHN0b2ssXG4gICAgICAgIGNhdGVnb3J5LFxuICAgICAgfTtcbiAgICAgIC8vIHVudHVrIG1lbmd1cGRhdGUgc2FsYWggc2F0dSBmaWVsZCBzYWphXG4gICAgICBPYmplY3Qua2V5cyhzZXREYXRhKS5mb3JFYWNoKChkYXRhKSA9PiB7XG4gICAgICAgIGlmICghc2V0RGF0YVtkYXRhXSkge1xuICAgICAgICAgIGRlbGV0ZSBzZXREYXRhW2RhdGFdO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb2JhdE1vZGVsLnVwZGF0ZU9iYXQoc2V0RGF0YSwgaWQpO1xuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCAyMDAsIFwic3VjY2VzIHVwZGF0ZSBkYXRhXCIsIHJlc3VsdCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDQwMCxcbiAgICAgICAgYGJhZCByZXF1ZXN0ICgke2Vycm9yLm1lc3NhZ2V9KWAsXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9LFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLE1BQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUN4QyxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUVyREUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsVUFBVSxFQUFFLE9BQU9DLEdBQUcsRUFBRUMsR0FBRyxLQUFLO0lBQzlCLElBQUk7TUFDRixJQUFJO1FBQUVDLElBQUk7UUFBRUMsS0FBSztRQUFFQyxNQUFNO1FBQUVDO01BQUssQ0FBQyxHQUFHTCxHQUFHLENBQUNNLEtBQUs7TUFDN0NKLElBQUksR0FBR0ssTUFBTSxDQUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDO01BQ3hC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