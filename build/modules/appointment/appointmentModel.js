const connection = require("../../config/mysql");
module.exports = {
  getAllAppointment: (limit, offset, search, sort) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM data_appointment WHERE id_pasien LIKE '%${search}%' ORDER BY ${sort} LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getAppointmentByIdPasien: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM data_appointment WHERE id_pasien = ?", id, (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getAppointmentById: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM data_appointment WHERE id = ?", id, (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountAppointment: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM data_appointment WHERE id_pasien LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  postAppointment: data => new Promise((resolve, reject) => {
    const query = connection.query("INSERT INTO data_appointment SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
    // eslint-disable-next-line no-console
    console.log(query.sql);
  }),
  updateAppointment: (data, id) => new Promise((resolve, reject) => {
    connection.query("UPDATE data_appointment SET ? WHERE id = ?", [data, id], error => {
      if (!error) {
        const newResult = {
          id,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxBcHBvaW50bWVudCIsImxpbWl0Iiwib2Zmc2V0Iiwic2VhcmNoIiwic29ydCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicXVlcnkiLCJlcnIiLCJyZXN1bHQiLCJFcnJvciIsInNxbE1lc3NhZ2UiLCJnZXRBcHBvaW50bWVudEJ5SWRQYXNpZW4iLCJpZCIsImdldEFwcG9pbnRtZW50QnlJZCIsImdldENvdW50QXBwb2ludG1lbnQiLCJ0b3RhbCIsInBvc3RBcHBvaW50bWVudCIsImRhdGEiLCJlcnJvciIsIm5ld1Jlc3VsdCIsImluc2VydElkIiwiY29uc29sZSIsImxvZyIsInNxbCIsInVwZGF0ZUFwcG9pbnRtZW50Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvYXBwb2ludG1lbnQvYXBwb2ludG1lbnRNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25uZWN0aW9uID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZy9teXNxbFwiKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGdldEFsbEFwcG9pbnRtZW50OiAobGltaXQsIG9mZnNldCwgc2VhcmNoLCBzb3J0KSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxyXG4gICAgICAgIGBTRUxFQ1QgKiBGUk9NIGRhdGFfYXBwb2ludG1lbnQgV0hFUkUgaWRfcGFzaWVuIExJS0UgJyUke3NlYXJjaH0lJyBPUkRFUiBCWSAke3NvcnR9IExJTUlUID8gT0ZGU0VUID9gLFxyXG4gICAgICAgIFtsaW1pdCwgb2Zmc2V0XSxcclxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcclxuICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pLFxyXG5cclxuICAgIGdldEFwcG9pbnRtZW50QnlJZFBhc2llbjogKGlkKSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxyXG4gICAgICAgIFwiU0VMRUNUICogRlJPTSBkYXRhX2FwcG9pbnRtZW50IFdIRVJFIGlkX3Bhc2llbiA9ID9cIixcclxuICAgICAgICBpZCxcclxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcclxuICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pLFxyXG5cclxuICAgIGdldEFwcG9pbnRtZW50QnlJZDogKGlkKSA9PlxyXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxyXG4gICAgICAgIFwiU0VMRUNUICogRlJPTSBkYXRhX2FwcG9pbnRtZW50IFdIRVJFIGlkID0gP1wiLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFlcnIpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnIuc3FsTWVzc2FnZX1gKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSksXHJcblxyXG4gICAgZ2V0Q291bnRBcHBvaW50bWVudDogKHNlYXJjaCkgPT5cclxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29ubmVjdGlvbi5xdWVyeShcclxuICAgICAgICBgU0VMRUNUIENPVU5UKCopIEFTIHRvdGFsIEZST00gZGF0YV9hcHBvaW50bWVudCBXSEVSRSBpZF9wYXNpZW4gTElLRSAnJSR7c2VhcmNofSUnYCxcclxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcclxuICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0WzBdLnRvdGFsKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pLFxyXG5cclxuICAgIHBvc3RBcHBvaW50bWVudDogKGRhdGEpID0+XHJcbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gY29ubmVjdGlvbi5xdWVyeShcclxuICAgICAgICBcIklOU0VSVCBJTlRPIGRhdGFfYXBwb2ludG1lbnQgU0VUID9cIixcclxuICAgICAgICBkYXRhLFxyXG4gICAgICAgIChlcnJvciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICBpZiAoIWVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcclxuICAgICAgICAgICAgICBpZDogcmVzdWx0Lmluc2VydElkLFxyXG4gICAgICAgICAgICAgIC4uLmRhdGEsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlc29sdmUobmV3UmVzdWx0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxyXG4gICAgICBjb25zb2xlLmxvZyhxdWVyeS5zcWwpO1xyXG4gICAgfSksXHJcblxyXG4gICAgdXBkYXRlQXBwb2ludG1lbnQ6IChkYXRhLCBpZCkgPT5cclxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29ubmVjdGlvbi5xdWVyeShcclxuICAgICAgICBcIlVQREFURSBkYXRhX2FwcG9pbnRtZW50IFNFVCA/IFdIRVJFIGlkID0gP1wiLFxyXG4gICAgICAgIFtkYXRhLCBpZF0sXHJcbiAgICAgICAgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICBpZiAoIWVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcclxuICAgICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgICAuLi5kYXRhLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vycm9yLnNxbE1lc3NhZ2V9YCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pLFxyXG5cclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUVoREMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsaUJBQWlCLEVBQUUsQ0FBQ0MsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxLQUM3QyxJQUFJQyxPQUFPLENB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