const {
  v4: uuidv4
} = require("uuid");
const jwt = require("jsonwebtoken");
const bcryptjs = require("bcryptjs");
const helperWrapper = require("../../helper/wrapper");
const authModel = require("./authModel.js");
// const userModel = require("../user/userModel");
// const redis = require("../../config/redis");
// const sendMail = require("../../helper/email/index");
require("dotenv").config();
module.exports = {
  register: async (req, res) => {
    try {
      const {
        nama,
        email,
        password
      } = req.body;

      // PROSES PENGECEKAN EMAIL SUDAH PERNAH TERDAFTAR ATAU BLM DI DATABASE
      const checkUser = await authModel.getUserByEmail(email);
      if (checkUser.length > 0) {
        return helperWrapper.response(res, 409, `Email already used`, null);
      }

      // Proses Validasi input form
      if (email.length < 1 || password.length < 1 || nama.length < 1) {
        return helperWrapper.response(res, 400, "All input must be filled", null);
      }

      // PROSES ENCRYPT PASSWORD
      const hashPassword = await bcryptjs.hash(password, 10);
      const setData = {
        id: uuidv4(),
        nama,
        email,
        password: hashPassword,
        role: "pasien"
      };
      const result = await authModel.register(setData);
      // const setDataMail = {
      //   to: result.email,
      //   subject: "Email Verification",
      //   template: "email-verification",
      //   data: {
      //     id: result.id,
      //     email: result.email,
      //     link: process.env.URL_BACKEND,
      //   },
      // };

      // await sendMail(setDataMail);
      return helperWrapper.response(res, 200, "Success register user, please verify your email", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad Request, ${error.message}`, null);
    }
  },
  login: async (req, res) => {
    try {
      const {
        email,
        password
      } = req.body;
      const checkUser = await authModel.getUserByEmail(email);

      // Proses Validasi input form
      if (email.length < 1 || password.length < 1) {
        return helperWrapper.response(res, 400, "All input must be filled", null);
      }
      const passwordUser = await bcryptjs.compare(password, checkUser[0].password);
      // console.log(checkUser[0]);
      if (!passwordUser) {
        return helperWrapper.response(res, 400, "Wrong password", null);
      }

      // PROSES UTAMA MEMBUAT TOKEN MENGGUNAKAN JWT (DATA YANG MAU DIUBAH, KATA KUNCI, LAMA TOKEN BISA DIGUNAKAN )
      const payload = checkUser[0];
      console.log(payload);
      delete payload.password;
      const token = jwt.sign({
        ...payload
      }, "RAHASIA", {
        expiresIn: "24h"
      });
      // Add refresh token
      const refreshToken = jwt.sign({
        ...payload
      }, "RAHASIA", {
        expiresIn: "72h"
      });
      return helperWrapper.response(res, 200, "Success login", {
        id: payload.id,
        token,
        refreshToken,
        name: payload.nama,
        role: payload.role
      });
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad request (${error.message})`, null);
    }
  }
  // verifyUser: async (req, res) => {
  //   try {
  //     const { id } = req.params;

  //     const result = await userModel.getUserById(id);
  //     if (result.length < 1) {
  //       return helperWrapper.response(
  //         res,
  //         404,
  //         `User by id ${id} not found`,
  //         null
  //       );
  //     }

  //     await authModel.verifyUser("active", id);
  //     return helperWrapper.response(res, 200, "Email verification success");
  //   } catch (error) {
  //     return helperWrapper.response(
  //       res,
  //       400,
  //       `Bad Request, ${error.message}`,
  //       null
  //     );
  //   }
  // },
  // logout: async (req, res) => {
  //   try {
  //     let token = req.headers.authorization;
  //     token = token.split(" ")[1];

  //     redis.setex(`accessToken:${token}`, 3600 * 24, token);

  //     return helperWrapper.response(res, 200, "Success logout", null);
  //   } catch (err) {
  //     return helperWrapper.response(
  //       res,
  //       400,
  //       `Bad Request (${err.message})`,
  //       null
  //     );
  //   }
  // },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2NCIsInV1aWR2NCIsInJlcXVpcmUiLCJqd3QiLCJiY3J5cHRqcyIsImhlbHBlcldyYXBwZXIiLCJhdXRoTW9kZWwiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIiwicmVnaXN0ZXIiLCJyZXEiLCJyZXMiLCJuYW1hIiwiZW1haWwiLCJwYXNzd29yZCIsImJvZHkiLCJjaGVja1VzZXIiLCJnZXRVc2VyQnlFbWFpbCIsImxlbmd0aCIsInJlc3BvbnNlIiwiaGFzaFBhc3N3b3JkIiwiaGFzaCIsInNldERhdGEiLCJpZCIsInJvbGUiLCJyZXN1bHQiLCJlcnJvciIsIm1lc3NhZ2UiLCJsb2dpbiIsInBhc3N3b3JkVXNlciIsImNvbXBhcmUiLCJwYXlsb2FkIiwiY29uc29sZSIsImxvZyIsInRva2VuIiwic2lnbiIsImV4cGlyZXNJbiIsInJlZnJlc2hUb2tlbiIsIm5hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlcy9hdXRoL2F1dGhDb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgdjQ6IHV1aWR2NCB9ID0gcmVxdWlyZShcInV1aWRcIik7XHJcbmNvbnN0IGp3dCA9IHJlcXVpcmUoXCJqc29ud2VidG9rZW5cIik7XHJcbmNvbnN0IGJjcnlwdGpzID0gcmVxdWlyZShcImJjcnlwdGpzXCIpO1xyXG5jb25zdCBoZWxwZXJXcmFwcGVyID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlci93cmFwcGVyXCIpO1xyXG5jb25zdCBhdXRoTW9kZWwgPSByZXF1aXJlKFwiLi9hdXRoTW9kZWwuanNcIik7XHJcbi8vIGNvbnN0IHVzZXJNb2RlbCA9IHJlcXVpcmUoXCIuLi91c2VyL3VzZXJNb2RlbFwiKTtcclxuLy8gY29uc3QgcmVkaXMgPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnL3JlZGlzXCIpO1xyXG4vLyBjb25zdCBzZW5kTWFpbCA9IHJlcXVpcmUoXCIuLi8uLi9oZWxwZXIvZW1haWwvaW5kZXhcIik7XHJcbnJlcXVpcmUoXCJkb3RlbnZcIikuY29uZmlnKCk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICByZWdpc3RlcjogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7IG5hbWEsIGVtYWlsLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XHJcblxyXG4gICAgICAvLyBQUk9TRVMgUEVOR0VDRUtBTiBFTUFJTCBTVURBSCBQRVJOQUggVEVSREFGVEFSIEFUQVUgQkxNIERJIERBVEFCQVNFXHJcbiAgICAgIGNvbnN0IGNoZWNrVXNlciA9IGF3YWl0IGF1dGhNb2RlbC5nZXRVc2VyQnlFbWFpbChlbWFpbCk7XHJcbiAgICAgIGlmIChjaGVja1VzZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgNDA5LCBgRW1haWwgYWxyZWFkeSB1c2VkYCwgbnVsbCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFByb3NlcyBWYWxpZGFzaSBpbnB1dCBmb3JtXHJcbiAgICAgIGlmIChcclxuICAgICAgICBlbWFpbC5sZW5ndGggPCAxIHx8XHJcbiAgICAgICAgcGFzc3dvcmQubGVuZ3RoIDwgMSB8fFxyXG4gICAgICAgIG5hbWEubGVuZ3RoIDwgMSBcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXHJcbiAgICAgICAgICByZXMsXHJcbiAgICAgICAgICA0MDAsXHJcbiAgICAgICAgICBcIkFsbCBpbnB1dCBtdXN0IGJlIGZpbGxlZFwiLFxyXG4gICAgICAgICAgbnVsbFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFBST1NFUyBFTkNSWVBUIFBBU1NXT1JEXHJcbiAgICAgIGNvbnN0IGhhc2hQYXNzd29yZCA9IGF3YWl0IGJjcnlwdGpzLmhhc2gocGFzc3dvcmQsIDEwKTtcclxuXHJcbiAgICAgIGNvbnN0IHNldERhdGEgPSB7XHJcbiAgICAgICAgaWQ6IHV1aWR2NCgpLFxyXG4gICAgICAgIG5hbWEsXHJcbiAgICAgICAgZW1haWwsXHJcbiAgICAgICAgcGFzc3dvcmQ6IGhhc2hQYXNzd29yZCxcclxuICAgICAgICByb2xlOiBcInBhc2llblwiLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aE1vZGVsLnJlZ2lzdGVyKHNldERhdGEpO1xyXG4gICAgICAvLyBjb25zdCBzZXREYXRhTWFpbCA9IHtcclxuICAgICAgLy8gICB0bzogcmVzdWx0LmVtYWlsLFxyXG4gICAgICAvLyAgIHN1YmplY3Q6IFwiRW1haWwgVmVyaWZpY2F0aW9uXCIsXHJcbiAgICAgIC8vICAgdGVtcGxhdGU6IFwiZW1haWwtdmVyaWZpY2F0aW9uXCIsXHJcbiAgICAgIC8vICAgZGF0YToge1xyXG4gICAgICAvLyAgICAgaWQ6IHJlc3VsdC5pZCxcclxuICAgICAgLy8gICAgIGVtYWlsOiByZXN1bHQuZW1haWwsXHJcbiAgICAgIC8vICAgICBsaW5rOiBwcm9jZXNzLmVudi5VUkxfQkFDS0VORCxcclxuICAgICAgLy8gICB9LFxyXG4gICAgICAvLyB9O1xyXG5cclxuICAgICAgLy8gYXdhaXQgc2VuZE1haWwoc2V0RGF0YU1haWwpO1xyXG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcclxuICAgICAgICByZXMsXHJcbiAgICAgICAgMjAwLFxyXG4gICAgICAgIFwiU3VjY2VzcyByZWdpc3RlciB1c2VyLCBwbGVhc2UgdmVyaWZ5IHlvdXIgZW1haWxcIixcclxuICAgICAgICByZXN1bHRcclxuICAgICAgKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxyXG4gICAgICAgIHJlcyxcclxuICAgICAgICA0MDAsXHJcbiAgICAgICAgYEJhZCBSZXF1ZXN0LCAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgICBudWxsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBsb2dpbjogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XHJcbiAgICAgIGNvbnN0IGNoZWNrVXNlciA9IGF3YWl0IGF1dGhNb2RlbC5nZXRVc2VyQnlFbWFpbChlbWFpbCk7XHJcblxyXG4gICAgICAvLyBQcm9zZXMgVmFsaWRhc2kgaW5wdXQgZm9ybVxyXG4gICAgICBpZiAoZW1haWwubGVuZ3RoIDwgMSB8fCBwYXNzd29yZC5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXHJcbiAgICAgICAgICByZXMsXHJcbiAgICAgICAgICA0MDAsXHJcbiAgICAgICAgICBcIkFsbCBpbnB1dCBtdXN0IGJlIGZpbGxlZFwiLFxyXG4gICAgICAgICAgbnVsbFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHBhc3N3b3JkVXNlciA9IGF3YWl0IGJjcnlwdGpzLmNvbXBhcmUoXHJcbiAgICAgICAgcGFzc3dvcmQsXHJcbiAgICAgICAgY2hlY2tVc2VyWzBdLnBhc3N3b3JkXHJcbiAgICAgICk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGNoZWNrVXNlclswXSk7XHJcbiAgICAgIGlmICghcGFzc3dvcmRVc2VyKSB7XHJcbiAgICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCA0MDAsIFwiV3JvbmcgcGFzc3dvcmRcIiwgbnVsbCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFBST1NFUyBVVEFNQSBNRU1CVUFUIFRPS0VOIE1FTkdHVU5BS0FOIEpXVCAoREFUQSBZQU5HIE1BVSBESVVCQUgsIEtBVEEgS1VOQ0ksIExBTUEgVE9LRU4gQklTQSBESUdVTkFLQU4gKVxyXG4gICAgICBjb25zdCBwYXlsb2FkID0gY2hlY2tVc2VyWzBdO1xyXG4gICAgICBjb25zb2xlLmxvZyhwYXlsb2FkKVxyXG4gICAgICBkZWxldGUgcGF5bG9hZC5wYXNzd29yZDtcclxuICAgICAgY29uc3QgdG9rZW4gPSBqd3Quc2lnbih7IC4uLnBheWxvYWQgfSwgXCJSQUhBU0lBXCIsIHtcclxuICAgICAgICBleHBpcmVzSW46IFwiMjRoXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBBZGQgcmVmcmVzaCB0b2tlblxyXG4gICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSBqd3Quc2lnbih7IC4uLnBheWxvYWQgfSwgXCJSQUhBU0lBXCIsIHtcclxuICAgICAgICBleHBpcmVzSW46IFwiNzJoXCIsXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShyZXMsIDIwMCwgXCJTdWNjZXNzIGxvZ2luXCIsIHtcclxuICAgICAgICBpZDogcGF5bG9hZC5pZCxcclxuICAgICAgICB0b2tlbixcclxuICAgICAgICByZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgbmFtZTogcGF5bG9hZC5uYW1hLFxyXG4gICAgICAgIHJvbGU6IHBheWxvYWQucm9sZVxyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxyXG4gICAgICAgIHJlcyxcclxuICAgICAgICA0MDAsXHJcbiAgICAgICAgYEJhZCByZXF1ZXN0ICgke2Vycm9yLm1lc3NhZ2V9KWAsXHJcbiAgICAgICAgbnVsbFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgLy8gdmVyaWZ5VXNlcjogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgLy8gICB0cnkge1xyXG4gIC8vICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xyXG5cclxuICAvLyAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlck1vZGVsLmdldFVzZXJCeUlkKGlkKTtcclxuICAvLyAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCAxKSB7XHJcbiAgLy8gICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXHJcbiAgLy8gICAgICAgICByZXMsXHJcbiAgLy8gICAgICAgICA0MDQsXHJcbiAgLy8gICAgICAgICBgVXNlciBieSBpZCAke2lkfSBub3QgZm91bmRgLFxyXG4gIC8vICAgICAgICAgbnVsbFxyXG4gIC8vICAgICAgICk7XHJcbiAgLy8gICAgIH1cclxuXHJcbiAgLy8gICAgIGF3YWl0IGF1dGhNb2RlbC52ZXJpZnlVc2VyKFwiYWN0aXZlXCIsIGlkKTtcclxuICAvLyAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCAyMDAsIFwiRW1haWwgdmVyaWZpY2F0aW9uIHN1Y2Nlc3NcIik7XHJcbiAgLy8gICB9IGNhdGNoIChlcnJvcikge1xyXG4gIC8vICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcclxuICAvLyAgICAgICByZXMsXHJcbiAgLy8gICAgICAgNDAwLFxyXG4gIC8vICAgICAgIGBCYWQgUmVxdWVzdCwgJHtlcnJvci5tZXNzYWdlfWAsXHJcbiAgLy8gICAgICAgbnVsbFxyXG4gIC8vICAgICApO1xyXG4gIC8vICAgfVxyXG4gIC8vIH0sXHJcbiAgLy8gbG9nb3V0OiBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAvLyAgIHRyeSB7XHJcbiAgLy8gICAgIGxldCB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb247XHJcbiAgLy8gICAgIHRva2VuID0gdG9rZW4uc3BsaXQoXCIgXCIpWzFdO1xyXG5cclxuICAvLyAgICAgcmVkaXMuc2V0ZXgoYGFjY2Vzc1Rva2VuOiR7dG9rZW59YCwgMzYwMCAqIDI0LCB0b2tlbik7XHJcblxyXG4gIC8vICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShyZXMsIDIwMCwgXCJTdWNjZXNzIGxvZ291dFwiLCBudWxsKTtcclxuICAvLyAgIH0gY2F0Y2ggKGVycikge1xyXG4gIC8vICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcclxuICAvLyAgICAgICByZXMsXHJcbiAgLy8gICAgICAgNDAwLFxyXG4gIC8vICAgICAgIGBCYWQgUmVxdWVzdCAoJHtlcnIubWVzc2FnZX0pYCxcclxuICAvLyAgICAgICBudWxsXHJcbiAgLy8gICAgICk7XHJcbiAgLy8gICB9XHJcbiAgLy8gfSxcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU07RUFBRUEsRUFBRSxFQUFFQztBQUFPLENBQUMsR0FBR0MsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUN0QyxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDbkMsTUFBTUUsUUFBUSxHQUFHRixPQUFPLENBQUMsVUFBVSxDQUFDO0FBQ3BDLE1BQU1HLGFBQWEsR0FBR0gsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBQ3JELE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUNLLE1BQU0sRUFBRTtBQUUxQkMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsUUFBUSxFQUFFLE9BQU9DLEdBQUcsRUFBRUMsR0FBRyxLQUFLO0lBQzVCLElBQUk7TUFDRixNQUFNO1FBQUVDLElBQUk7UUFBRUMsS0FBSztRQUFFQztNQUFTLENBQUMsR0FBR0osR0FBRyxDQUFDSyxJQUFJOztNQUUxQztNQUNBLE1BQU1DLFNBQVMsR0FBRyxNQUFNWCxTQUFTLENBQUNZLGNBQWMsQ0FBQ0osS0FBSyxDQUFDO01BQ3ZELElBQUlHLFNBQVMsQ0FBQ0UsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN4QixPQUFPZCxhQUFhLENBQUNlLFFBQVEsQ0FBQ1IsR0FBRyxFQUFFLEdBQUcsRUFBRyxvQkFBbUIsRUFBRSxJQUFJLENBQUM7TUFDckU7O01BRUE7TUFDQSxJQUNFRSxLQUFLLENBQUNLLE1BQU0sR0FBRyxDQUFDLElBQ2hCSixRQUFRLENBQUNJLE1BQU0sR0FBRyxDQUFDLElBQ25CTixJQUFJLENBQUNNLE1BQU0sR0FBRyxDQUFDLEVBQ2Y7UUFDQSxPQUFPZCxhQUFhLENBQUNlLFFBQVEsQ0FDM0JSLEdBQUcsRUFDSCxHQUFHLEVBQ0gsMEJBQTBCLEVBQzFCLElBQUksQ0FDTDtNQUNIOztNQUVBO01BQ0EsTUFBTVMsWUFBWSxHQUFHLE1BQU1qQixRQUFRLENBQUNrQixJQUFJLENBQUNQLFFBQVEsRUFBRSxFQUFFLENBQUM7TUFFdEQsTUFBTVEsT0FBTyxHQUFHO1FBQ2RDLEVBQUUsRUFBRXZCLE1BQU0sRUFBRTtRQUNaWSxJQUFJO1FBQ0pDLEtBQUs7UUFDTEMsUUFBUSxFQUFFTSxZQUFZO1FBQ3RCSSxJQUFJLEVBQUU7TUFDUixDQUFDO01BRUQsTUFBTUMsTUFBTSxHQUFHLE1BQU1wQixTQUFTLENBQUNJLFFBQVEsQ0FBQ2EsT0FBTyxDQUFDO01BQ2hEO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBOztNQUVBO01BQ0EsT0FBT2xCLGFBQWEsQ0FBQ2UsUUFBUSxDQUMzQlIsR0FBRyxFQUNILEdBQUcsRUFDSCxpREFBaUQsRUFDakRjLE1BQU0sQ0FDUDtJQUNILENBQUMsQ0FBQyxPQUFPQyxLQUFLLEVBQUU7TUFDZCxPQUFPdEIsYUFBYSxDQUFDZSxRQUFRLENBQzNCUixHQUFHLEVBQ0gsR0FBRyxFQUNGLGdCQUFlZSxLQUFLLENBQUNDLE9BQVEsRUFBQyxFQUMvQixJQUFJLENBQ0w7SUFDSDtFQUNGLENBQUM7RUFDREMsS0FBSyxFQUFFLE9BQU9sQixHQUFHLEVBQUVDLEdBQUcsS0FBSztJQUN6QixJQUFJO01BQ0YsTUFBTTtRQUFFRSxLQUFLO1FBQUVDO01BQVMsQ0FBQyxHQUFHSixHQUFHLENBQUNLLElBQUk7TUFDcEMsTUFBTUMsU0FBUyxHQUFHLE1BQU1YLFNBQVMsQ0FBQ1ksY0FBYyxDQUFDSixLQUFLLENBQUM7O01BRXZEO01BQ0EsSUFBSUEsS0FBSyxDQUFDSyxNQUFNLEdBQUcsQ0FBQyxJQUFJSixRQUFRLENBQUNJLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDM0MsT0FBT2QsYUFBYSxDQUFDZSxRQUFRLENBQzNCUixHQUFHLEVBQ0gsR0FBRyxFQUNILDBCQUEwQixFQUMxQixJQUFJLENBQ0w7TUFDSDtNQUVBLE1BQU1rQixZQUFZLEdBQUcsTUFBTTFCLFFBQVEsQ0FBQzJCLE9BQU8sQ0FDekNoQixRQUFRLEVBQ1JFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0YsUUFBUSxDQUN0QjtNQUNEO01BQ0EsSUFBSSxDQUFDZSxZQUFZLEVBQUU7UUFDakIsT0FBT3pCLGFBQWEsQ0FBQ2UsUUFBUSxDQUFDUixHQUFHLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQztNQUNqRTs7TUFFQTtNQUNBLE1BQU1vQixPQUFPLEdBQUdmLFNBQVMsQ0FBQyxDQUFDLENBQUM7TUFDNUJnQixPQUFPLENBQUNDLEdBQUcsQ0FBQ0YsT0FBTyxDQUFDO01BQ3BCLE9BQU9BLE9BQU8sQ0FBQ2pCLFFBQVE7TUFDdkIsTUFBTW9CLEtBQUssR0FBR2hDLEdBQUcsQ0FBQ2lDLElBQUksQ0FBQztRQUFFLEdBQUdKO01BQVEsQ0FBQyxFQUFFLFNBQVMsRUFBRTtRQUNoREssU0FBUyxFQUFFO01BQ2IsQ0FBQyxDQUFDO01BQ0Y7TUFDQSxNQUFNQyxZQUFZLEdBQUduQyxHQUFHLENBQUNpQyxJQUFJLENBQUM7UUFBRSxHQUFHSjtNQUFRLENBQUMsRUFBRSxTQUFTLEVBQUU7UUFDdkRLLFNBQVMsRUFBRTtNQUNiLENBQUMsQ0FBQztNQUNGLE9BQU9oQyxhQUFhLENBQUNlLFFBQVEsQ0FBQ1IsR0FBRyxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUU7UUFDdkRZLEVBQUUsRUFBRVEsT0FBTyxDQUFDUixFQUFFO1FBQ2RXLEtBQUs7UUFDTEcsWUFBWTtRQUNaQyxJQUFJLEVBQUVQLE9BQU8sQ0FBQ25CLElBQUk7UUFDbEJZLElBQUksRUFBRU8sT0FBTyxDQUFDUDtNQUNoQixDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsT0FBT0UsS0FBSyxFQUFFO01BQ2QsT0FBT3RCLGFBQWEsQ0FBQ2UsUUFBUSxDQUMzQlIsR0FBRyxFQUNILEdBQUcsRUFDRixnQkFBZWUsS0FBSyxDQUFDQyxPQUFRLEdBQUUsRUFDaEMsSUFBSSxDQUNMO0lBQ0g7RUFDRjtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztFQUVBOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0YsQ0FBQyJ9